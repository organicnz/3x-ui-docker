---
description: 
globs: 
alwaysApply: true
---
# Cursor IDE Repository Secrets Management Rules

## General Rules
1. All repository secrets must be properly encrypted and stored using GitHub's secrets management system.
2. Secrets should follow a consistent naming convention using uppercase letters and underscores.
3. Regular audits of secrets should be performed to ensure they remain current and secure.
4. Never expose secrets in workflow logs or outputs; use proper masking techniques.
5. Implement monitoring for secret usage and unauthorized access attempts.

## Access Control
1. Only authorized team members should have access to modify repository secrets.
2. Use repository environment protection rules to limit which branches can access deployment secrets.
3. Implement different access levels for development, staging, and production environments.
4. Set up required reviewers for any workflow changes that utilize sensitive secrets.
5. Implement IP allow-listing for workflow runs that access production secrets.

## Secret Categories by Workflow Job

### üîç Selection & Validation
- `GITHUB_TOKEN`: Limited scope token for repository access
- `WORKFLOW_CONFIG`: Configuration parameters for workflow selection

### üöÄ Setup & Deployment 
- `SSH_PRIVATE_KEY`, `SSH_KNOWN_HOSTS`: SSH authentication credentials
- `DEPLOY_PATH`, `SERVER_HOST`, `SERVER_USER`: Server deployment configuration
- `DOCKER_CONFIG`: Docker registry authentication (if using private registry)

### üíæ Backup & Verification
- `BACKUP_RETENTION_DAYS`: Configuration for backup retention periods
- `NOTIFICATION_WEBHOOK`: Webhook URL for deployment notifications
- `MONITORING_API_KEY`: API key for external monitoring service integration

### üîß Service Configuration
- `XUI_PANEL_URL`, `XUI_USERNAME`, `XUI_PASSWORD`: XUI panel credentials
- `VPN_DOMAIN`, `VPN_ADMIN_EMAIL`: VPN service configuration
- `XRAY_VMESS_AEAD_FORCED`: XRay protocol configuration
- `JWT_SECRET`: Secret key for JSON Web Token signing

### üì° External Services
- `TELEGRAM_BOT_TOKEN`: API token for Telegram bot integration
- `NEXT_PUBLIC_API_URL`, `NEXT_PUBLIC_SITE_URL`: Public-facing URLs

## Secret Usage in Workflow Logs
1. Configure proper secret masking in all workflow log outputs.
2. Never echo, print, or log full secret values, even in debug mode.
3. Set up log rotation and retention policies for any logs that might contain masked secrets.
4. Implement alerting for potential secret exposure in logs.
5. Use environment variables or secure string substitution for command arguments.

## Best Practices
1. Rotate secrets regularly, especially after team member departures.
2. Update `NODE_ENV` appropriately for different deployment environments.
3. Never hard-code secrets in application code or commit them to version control.
4. Use environment-specific secrets for multi-environment deployments.
5. Monitor secret usage and implement alerts for unusual access patterns.
6. Limit the scope of secrets to only the required workflows and jobs.
7. Use dedicated service accounts for automated processes instead of personal credentials.
8. Implement just-in-time secret access where possible.

## Secret Verification
1. Implement preflight checks in workflows to verify secret availability before execution.
2. Add validation steps to confirm secrets meet required format and strength criteria.
3. Test secrets in non-production environments before using in production workflows.
4. Document required format and structure for each secret type.
5. Implement secret validity period checks within workflows.

## Secret Rotation Schedule
1. High-sensitivity secrets (JWT, database credentials): Every 30 days
2. Service credentials (API tokens, SSH keys): Every 90 days
3. Configuration values (URLs, environment variables): Review quarterly
4. Automate rotation where possible using dedicated rotation workflows.
5. Document last rotation date for each secret in a secure location.

## Workflow-Specific Secret Handling
1. üîç **Selection**: Minimize secret usage in the selection phase.
2. üöÄ **Setup**: Use setup-specific secrets that expire after initial configuration.
3. üö¢ **Deployment**: Implement just-in-time secret access for deployment credentials.
4. ‚úÖ **Verification**: Use read-only credentials for verification steps.
5. üíæ **Backup**: Implement separate backup credentials with limited scope.

## Documentation
1. Maintain documentation of all secrets, their purpose, and which systems/services they relate to via Readme.md.
2. Document the process for rotating and updating secrets.
3. Keep a record of secret update history.
4. Map secrets to specific workflow steps where they are required.
5. Include contact information for secret owners/maintainers.
6. Document the procedure for emergency secret revocation.