---
description: 
globs: 
alwaysApply: true
---
# 3x-ui VPN Service Architecture & Development Guidelines

## Table of Contents
- @Overview
- @Architecture
- @Docker Container Management
- @3x-ui Configuration
- @Security Considerations
- @Performance Optimization
- @High Availability Setup
- @Monitoring & Logging
- @Backup & Recovery
- @Upgrade Procedures
- @Troubleshooting
- @Development Workflow
- @Environment Setup
- @API Integration
- @Database Management
- @GitHub Actions CI/CD
- @Secrets Management


## Overview

### Core Components
- **3x-ui**: Admin panel for XRay-based VPN service
- **XRay**: Core protocol server (V2Ray fork) for VPN connections
- **Docker**: Container orchestration platform
- **SQLite**: Local database (x-ui.db) for user and configuration storage
- **GitHub Actions**: CI/CD pipeline for deployment and testing

### Design Principles
- **Security First**: All design decisions must prioritize security
- **Infrastructure as Code**: All infrastructure must be defined in code (Docker Compose, GitHub Actions)
- **Immutable Infrastructure**: Containers should be replaceable without service disruption
- **Zero Trust Architecture**: Assume no network segment is secure
- **Observability**: Comprehensive logging and monitoring across all components

## Architecture

### Network Topology
```
Internet → 3x-ui Admin Panel (54321/TCP)
         → XRay Protocols (Dynamic Ports)
```

### Container Structure
- **3x-ui**: Admin panel container with integrated XRay
- **Prometheus**: Metrics collection (optional)
- **Grafana**: Metrics visualization (optional)

### Data Flow
1. Client connects directly to VPN endpoint
2. XRay handles protocol-specific connections
3. 3x-ui manages XRay configuration via API

## Docker Container Management

### Base Image
- Use the official repository: `github.com/MHSanaei/3x-ui`
- Always specify exact version tags, never use `latest`
- Consider using Alpine-based images where available

### Dockerfile Optimization
- Use multi-stage builds to minimize image size
- Implement proper health checks
- Set appropriate resource limits
- Avoid running containers as root
- Remove unnecessary packages and files

### Compose File Structure
```yaml
version: '3.8'

services:
  3x-ui:
    image: mhsanaei/3x-ui:latest
    container_name: 3x-ui
    restart: unless-stopped
    volumes:
      - ./db/:/etc/x-ui/
      - ./cert/:/root/cert/
    environment:
      - XRAY_VMESS_AEAD_FORCED=false
    ports:
      - "54321:54321"
      - "443:443"
    networks:
      - vpn-network

networks:
  vpn-network:
    driver: bridge
```

### Volume Management
- Store persistent data in named volumes:
  - SQLite database (x-ui.db)
  - Certificates
  - 3x-ui configuration
- Use bind mounts sparingly and only for configuration files
- Implement regular volume backups

## 3x-ui Configuration

### Core Settings
- Change default admin credentials immediately
- Use the built-in SQLite database (x-ui.db)
- Set appropriate resource limits
- Disable unnecessary protocols
- Configure secure random port assignments

### Production Hardening
- Disable debug logging in production
- Implement session timeouts for admin panel
- Limit exposed services to necessary protocols only
- Configure protocol-specific security settings

### XRay Configuration
- Set appropriate concurrency limits
- Configure TLS fingerprinting to resist detection
- Implement fallback configurations for resilience
- Rotate encryption keys regularly
- Configure transport security (TLS, WebSocket)

### User Management
- Implement strong password policies
- Configure appropriate bandwidth limits
- Set up expiration for inactive accounts
- Implement IP-based restrictions where appropriate
- Define clear traffic quota management

## Security Considerations

### Defense in Depth
- Restrict admin panel access by IP
- Configure 2FA for admin access
- Use non-standard ports for admin services
- Implement strict firewall rules
- Deploy fail2ban for brute force protection

### Network Security
- Isolate container networks
- Implement proper network segmentation
- Use internal Docker networks for inter-service communication
- Configure IPTables to restrict outbound connections
- Implement proper DNS security

### Certificate Management
- Generate strong Diffie-Hellman parameters
- Configure secure TLS cipher suites
- Set up automatic certificate renewal
- Monitor certificate expiration

### Secrets Management
- Use GitHub Actions secrets for sensitive configuration
- Implement encryption for secrets at rest
- Avoid environment variables for secrets
- Rotate all credentials regularly
- Implement strict access control for secrets

## Performance Optimization

### System Tuning
- Optimize kernel parameters:
  ```bash
  # /etc/sysctl.conf
  fs.file-max = 1000000
  net.core.rmem_max = 67108864
  net.core.wmem_max = 67108864
  net.ipv4.tcp_rmem = 4096 87380 33554432
  net.ipv4.tcp_wmem = 4096 65536 33554432
  net.ipv4.tcp_congestion_control = bbr
  net.core.netdev_max_backlog = 30000
  net.core.somaxconn = 65535
  net.ipv4.tcp_max_syn_backlog = 8192
  ```

### XRay Optimization
- Configure appropriate buffer sizes
- Enable BBR congestion control
- Configure connection multiplexing
- Optimize encryption algorithms for CPU efficiency
- Configure proper concurrency limits

### Docker Optimization
- Limit container resource usage (CPU, memory)
- Use `--cpuset-cpus` for CPU pinning when appropriate
- Configure appropriate restart policies
- Use tmpfs for ephemeral data
- Configure proper logging drivers

## High Availability Setup

### Active-Passive Configuration
- Set up multiple 3x-ui instances
- Configure health checks for automatic failover
- Use shared storage for configuration
- Configure proper DNS failover

### Load Balancing
- Distribute VPN connections across multiple nodes
- Configure consistent hashing for client persistence
- Implement proper health checks
- Configure connection draining during maintenance
- Monitor connection distribution

### Backup Strategy
- Create regular database backups
- Backup certificates and configuration
- Implement off-site backup storage
- Test backup restoration regularly
- Document recovery procedures

## Monitoring & Logging

### Metrics Collection
- Configure Prometheus for metrics collection
- Set up Grafana for visualization
- Monitor key performance indicators:
  - Connection counts
  - Bandwidth usage
  - Error rates
  - CPU and memory usage
  - TLS handshake times

### Log Management
- Configure centralized logging (ELK stack or similar)
- Implement log rotation
- Set appropriate log levels
- Configure alert thresholds
- Implement log retention policies

### Alerting
- Create alerting for critical issues:
  - Certificate expiration
  - Service unavailability
  - Resource exhaustion
  - Security events
  - Unusual traffic patterns

### Dashboard
- Create operational dashboards for:
  - System health
  - User activity
  - Bandwidth usage
  - Error rates
  - Security events

## Backup & Recovery

### Backup Procedures
- Database backup (daily)
- Configuration backup (after changes)
- Certificate backup (monthly)
- User data backup (daily)
- System state backup (weekly)

### Disaster Recovery
- Document recovery procedures
- Test recovery process regularly
- Implement automated recovery where possible
- Configure proper data retention
- Practice restoration drills

### Stateful Data
- Identify all stateful data:
  - SQLite database (x-ui.db)
  - Certificates
  - 3x-ui settings
  - Traffic statistics

## Upgrade Procedures

### 3x-ui Upgrades
- Test upgrades in staging environment
- Create database backup before upgrade
- Follow specific version upgrade paths
- Document rollback procedures
- Verify configuration after upgrade

### Docker Image Updates
- Use semantic versioning for images
- Test new images in staging environment
- Configure rolling updates
- Document image-specific changes
- Verify functionality after update

## Troubleshooting

### Common Issues
- Connection failures
- Certificate errors
- Database corruption
- Resource exhaustion
- Protocol incompatibilities

### Diagnostic Tools
- `tcpdump` for packet capture
- `netstat`/`ss` for connection analysis
- Docker logs for container issues
- XRay logs for protocol issues

### Debugging Process
1. Identify affected components
2. Check relevant logs
3. Verify connectivity
4. Test with simplified configuration
5. Isolate protocol-specific issues
6. Document resolution for future reference

## Development Workflow

### Local Environment
- Use Docker Compose for local development
- Create development-specific configuration
- Use volumes for quick iteration
- Configure debug logging
- Use non-production credentials

### Testing
- Create integration tests for API endpoints
- Verify protocol functionality with test clients
- Test upgrade procedures
- Validate configuration changes
- Test performance under load

### CI/CD Pipeline
- Automate build process with GitHub Actions
- Implement automated testing
- Configure staging environment
- Automate deployment
- Implement rollback capabilities

### Code Review
- Review security implications
- Check for configuration drift
- Verify backward compatibility
- Assess performance impact
- Document API changes

## Environment Setup

### Production Environment
- Use dedicated hardware/VMs
- Configure infrastructure monitoring
- Implement proper network isolation
- Configure automated backups
- Document all configuration

### Development Environment
- Use Docker Compose with development configuration
- Configure simulated clients
- Implement debugging tools
- Use development certificates
- Configure non-production resources

### Staging Environment
- Mirror production configuration
- Use representative data volumes
- Configure automated testing
- Implement deployment rehearsal
- Verify upgrade procedures

## API Integration

### 3x-ui API
- Document API endpoints
- Implement proper authentication
- Configure rate limiting
- Monitor API usage
- Create client libraries

### External Service Integration
- Document integration points
- Configure secure communication
- Implement appropriate error handling
- Configure fallback mechanisms
- Monitor integration health

### Automation API
- Create automation scripts for common tasks
- Document API workflows
- Implement proper error handling
- Configure idempotent operations
- Test automation thoroughly

## Database Management

### SQLite Configuration
- Use the built-in SQLite database (x-ui.db)
- Configure regular backups
- Monitor database size and performance
- Implement database maintenance procedures
- Set up database monitoring

### Schema Management
- Document database schema
- Implement migration scripts
- Test schema changes
- Backup before migrations
- Verify data integrity after changes

### Optimization
- Configure appropriate caching
- Optimize query patterns
- Configure proper indexes
- Set up regular maintenance

## GitHub Actions CI/CD

### Workflow Structure
- Create dedicated workflow jobs for each operational phase:
  - 🔍 **Selection**: Determine which workflow to run based on triggers
  - 🚀 **Setup**: Initial server provisioning
  - 🔍 **Validation**: Pre-deployment validation
  - 🚢 **Deployment**: Deploy the VPN service
  - ✅ **Verification**: Verify deployment success
  - 💾 **Backup**: Create and manage backups
- Implement comprehensive logging for each job phase
- Use visual indicators (emojis) to improve workflow readability
- Configure proper job dependencies and conditional execution
- Create centralized workflow logs for troubleshooting

### Environment Configuration
- Create environment-specific configuration
- Configure proper environment secrets
- Implement environment-specific validation
- Document environment setup
- Set up environment protection rules

### Deployment Strategy
- Implement blue-green deployment
- Configure proper rollback procedures
- Set up deployment approvals
- Implement deployment verification with health checks
- Configure automatic log collection for failed deployments
- Maintain a history of deployment logs for troubleshooting

### Logging & Monitoring
- Create detailed deployment logs with timestamps
- Implement continuous health checking
- Archive logs as workflow artifacts
- Symlink latest logs for quick access
- Track container status and performance metrics
- Implement log rotation to maintain history while managing storage

### Testing Integration
- Run integration tests in CI pipeline
- Validate configuration changes
- Test performance impacts
- Verify security configurations
- Implement smoke tests post-deployment

## Secrets Management

### GitHub Actions Secrets
- Store all sensitive information in GitHub Actions secrets
- Configure proper secret scoping for different environments
- Implement automated secret rotation
- Set up secret access auditing
- Document secret purpose and usage

### Secret Categories
- Authentication secrets:
  - `JWT_SECRET`: Secret key for JSON Web Token signing
  - `SSH_PRIVATE_KEY`, `SSH_KNOWN_HOSTS`: SSH authentication credentials
- Deployment secrets:
  - `DEPLOY_PATH`, `SERVER_HOST`, `SERVER_USER`, `NODE_ENV`: Deployment configuration
- VPN Configuration secrets:
  - `VPN_DOMAIN`, `VPN_ADMIN_EMAIL`, `XRAY_VMESS_AEAD_FORCED`: VPN service configuration
- External service secrets:
  - `TELEGRAM_BOT_TOKEN`: API token for Telegram bot integration
  - `XUI_PANEL_URL`, `XUI_USERNAME`, `XUI_PASSWORD`: XUI panel credentials

### Secret Usage
- Only use secrets through GitHub Actions workflows
- Never expose secrets in logs or outputs
- Implement proper secret masking in logs
- Set up secret usage monitoring
- Document secret requirements for each workflow

### Secret Rotation
- Rotate high-sensitivity secrets every 30 days
- Rotate service credentials every 90 days
- Review configuration values quarterly
- Implement automated rotation procedures
- Document rotation history
