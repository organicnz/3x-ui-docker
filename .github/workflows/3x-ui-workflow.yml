permissions:
  contents: read

name: 3x-ui VPN Service Management

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - README.md
      - .gitignore
      - logs/**
      - workflow_logs/**
  schedule:
    - cron: 0 2 * * *  # Run daily at 2 AM UTC for backups

jobs:
  validate:
    name: 🔍 Validate Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Validate Docker Compose
        run: |
          if [ ! -f docker-compose.yml ]; then
            echo "ERROR: docker-compose.yml not found!"
            exit 1
          fi
          cat docker-compose.yml | python3 -c "import sys, yaml; yaml.safe_load(sys.stdin)" && echo "✅ Valid YAML"
          grep -q "3x-ui:" docker-compose.yml && echo "✅ 3x-ui service found"
          grep -q "54321:54321" docker-compose.yml && echo "✅ Admin panel port (54321) configured"
          grep -q ":443" docker-compose.yml && echo "✅ HTTPS port mapping (:443) configured"

  setup:
    name: 🚀 Setup Server
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Add to known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
      - name: Check SSH connectivity
        run: |
          ssh -o BatchMode=yes -o ConnectTimeout=10 ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo '✅ SSH connection successful'"
      - name: Create deploy directory
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "mkdir -p ${{ secrets.DEPLOY_PATH }}"
      - name: Install Docker if not installed
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} '
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
          else
            echo "Docker already installed."
          fi
          if ! command -v docker-compose &> /dev/null; then
            echo "Installing Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.15.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          else
            echo "Docker Compose already installed."
          fi
          '

  deploy:
    name: 🚢 Deploy VPN Service
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Add to known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
      - name: Transfer files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: docker-compose.yml,.env.example
          target: ${{ secrets.DEPLOY_PATH }}
          strip_components: 0
      - name: Setup and start containers
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          cd ${{ secrets.DEPLOY_PATH }}
          if [ ! -f .env ]; then
            cp .env.example .env
            echo 'Created .env file from template. Please update with your settings.'
          fi
          mkdir -p db
          docker-compose pull
          docker-compose up -d
          "

  verify:
    name: ✅ Verify Deployment
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Add to known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
      - name: Check service health
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          cd ${{ secrets.DEPLOY_PATH }}
          if docker-compose ps | grep -q '3x-ui'; then
            echo '✅ 3x-ui container is running'
            docker ps --filter name=3x-ui --format '{{.Status}}'
          else
            echo '❌ 3x-ui container is not running!'
            docker-compose logs
            exit 1
          fi
          "

  logs:
    name: 📊 Collect Logs
    needs: [deploy, verify]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Add to known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
      - name: Ensure logs directory is not empty
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} '
            cd ${{ secrets.DEPLOY_PATH }}
            mkdir -p logs
            if [ -z "$(ls -A logs)" ]; then
              echo "No logs found, creating dummy.log"
              echo "No logs available." > logs/dummy.log
            fi
          '
      - name: Collect Logs
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: logs/*
          target: workflow_logs/
          strip_components: 1
          overwrite: true
          command_timeout: 10m
      - name: Archive logs
        uses: actions/upload-artifact@v4
        with:
          name: deployment-logs
          path: workflow_logs/
          retention-days: 7

  summary:
    name: 🎉 Deployment Summary
    needs: [validate, setup, deploy, verify, logs]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate Summary
        run: |
          echo "# 3x-ui VPN Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Configuration Validation**: See validate job" >> $GITHUB_STEP_SUMMARY
          echo "✅ **SSH Setup**: See setup job" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Deployment**: See deploy job" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Verification**: See verify job" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Logs**: See logs job" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Access Information" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Admin Panel**: https://${{ secrets.VPN_DOMAIN }}:54321/" >> $GITHUB_STEP_SUMMARY
      - name: Output Result
        run: |
          echo "✅ 3x-ui VPN deployment workflow completed." 