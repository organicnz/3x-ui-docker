permissions:
  contents: read

name: 3x-ui VPN Service Management

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - README.md
      - .gitignore
      - logs/**
      - workflow_logs/**
  schedule:
    - cron: 0 2 * * *  # Run daily at 2 AM UTC for backups

jobs:
  debug_info:
    name: 🐛 Debug Workflow Info
    runs-on: ubuntu-latest
    env:
      GH_EVENT_NAME: ${{ github.event_name }}
      GH_REF_NAME: ${{ github.ref_name }}
      GH_HEAD_REF: ${{ github.head_ref }}
      GH_BASE_REF: ${{ github.base_ref }}
      GH_REF_TYPE: ${{ github.ref_type }}
      GH_REPOSITORY: ${{ github.repository }}
    steps:
      - name: Display Trigger Info
        run: |
          echo "Workflow triggered by: $GH_EVENT_NAME"
          echo "Ref name: $GH_REF_NAME"
          echo "Head ref: $GH_HEAD_REF"
          echo "Base ref: $GH_BASE_REF"
          echo "Ref type: $GH_REF_TYPE"
          echo "Repository: $GH_REPOSITORY"

  validate:
    name: 🔍 Validate Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Validate Docker Compose
        run: |
          if [ ! -f docker-compose.yml ]; then
            echo "ERROR: docker-compose.yml not found!"
            exit 1
          fi
          cat docker-compose.yml | python3 -c "import sys, yaml; yaml.safe_load(sys.stdin)" && echo "✅ Valid YAML"
          grep -q "3x-ui:" docker-compose.yml && echo "✅ 3x-ui service found"
          grep -q "54321:54321" docker-compose.yml && echo "✅ Admin panel port (54321) configured"
          grep -q ":443" docker-compose.yml && echo "✅ HTTPS port mapping (:443) configured"

  setup:
    name: 🚀 Setup Server
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Add to known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
      - name: Check SSH connectivity
        run: |
          ssh -o BatchMode=yes -o ConnectTimeout=10 ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo '✅ SSH connection successful'"
      - name: Initialize Git repository on server
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
            # Check if deploy path exists
            if [ -d '${{ secrets.DEPLOY_PATH }}' ]; then
              echo 'Deploy directory exists'
              
              # Check if it's a git repository with commits
              if [ -d '${{ secrets.DEPLOY_PATH }}/.git' ]; then
                cd ${{ secrets.DEPLOY_PATH }}
                
                # Check if there are any commits
                if git rev-parse --verify HEAD >/dev/null 2>&1; then
                  echo 'Git repository has commits, updating remote'
                  git remote set-url origin https://github.com/${{ github.repository }}.git
                  git fetch origin
                else
                  echo 'Git repository exists but has no commits'
                  # Backup any important files
                  mkdir -p /tmp/3x-ui-backup
                  cp -r .env* db/* logs/* /tmp/3x-ui-backup/ 2>/dev/null || true
                  
                  # Remove the directory and clone fresh
                  cd ..
                  rm -rf $(basename '${{ secrets.DEPLOY_PATH }}')
                  git clone https://github.com/${{ github.repository }}.git $(basename '${{ secrets.DEPLOY_PATH }}')
                  
                  # Restore important files
                  cd ${{ secrets.DEPLOY_PATH }}
                  mkdir -p db logs
                  cp -r /tmp/3x-ui-backup/* . 2>/dev/null || true
                fi
              else
                echo 'Directory exists but is not a git repo, backing up and cloning'
                # Backup existing directory
                mkdir -p /tmp/3x-ui-backup
                cp -r ${{ secrets.DEPLOY_PATH }}/.env* ${{ secrets.DEPLOY_PATH }}/db/* ${{ secrets.DEPLOY_PATH }}/logs/* /tmp/3x-ui-backup/ 2>/dev/null || true
                
                # Remove and clone fresh
                rm -rf ${{ secrets.DEPLOY_PATH }}
                git clone https://github.com/${{ github.repository }}.git ${{ secrets.DEPLOY_PATH }}
                
                # Restore important files
                cd ${{ secrets.DEPLOY_PATH }}
                mkdir -p db logs
                cp -r /tmp/3x-ui-backup/* . 2>/dev/null || true
              fi
            else
              echo 'Deploy directory does not exist, cloning fresh'
              mkdir -p $(dirname '${{ secrets.DEPLOY_PATH }}')
              git clone https://github.com/${{ github.repository }}.git ${{ secrets.DEPLOY_PATH }}
            fi
          "
      - name: Install Docker if not installed
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} '
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
          else
            echo "Docker already installed."
          fi
          if ! command -v docker-compose &> /dev/null; then
            echo "Installing Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.15.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          else
            echo "Docker Compose already installed."
          fi
          '

  deploy:
    name: 🚢 Deploy VPN Service
    needs: [setup]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Add to known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
      - name: Deploy from Git
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
            cd ${{ secrets.DEPLOY_PATH }}
            
            # Make sure we're on the main branch
            git checkout main || git checkout -b main
            
            # Pull the latest code (should work now if repository was cloned)
            git fetch origin
            git reset --hard origin/main
            
            # Create .env from template if it doesn't exist
            if [ ! -f .env ]; then
              cp .env.example .env
              echo 'Created .env file from template. Please update with your settings.'
            fi
            
            # Make sure directories exist
            mkdir -p db cert logs
            
            # Start containers
            docker-compose pull
            docker-compose up -d
          "
      - name: Verify deployment
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
            cd ${{ secrets.DEPLOY_PATH }}
            echo 'Listing deployed files:'
            ls -la
            echo 'Listing docker containers:'
            docker-compose ps
          "

  verify:
    name: ✅ Verify Deployment
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Add to known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
      - name: Check service health
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          cd ${{ secrets.DEPLOY_PATH }}
          if docker-compose ps | grep -q '3x-ui'; then
            echo '✅ 3x-ui container is running'
            docker ps --filter name=3x-ui --format '{{.Status}}'
          else
            echo '❌ 3x-ui container is not running!'
            docker-compose logs
            exit 1
          fi
          "

  logs:
    name: 📊 Collect Logs
    needs: [deploy, verify]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Add to known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
      - name: Ensure logs directory is not empty
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} '
            set -e
            cd ${{ secrets.DEPLOY_PATH }}
            mkdir -p logs
            sudo chown $USER:$USER logs
            sudo chmod 777 logs
            if [ -z "$(ls -A logs)" ]; then
              echo "No logs found, creating dummy.log"
              sudo touch logs/dummy.log
              sudo chmod 666 logs/dummy.log
              echo "No logs available." | sudo tee logs/dummy.log
            fi
            echo "Contents of logs directory after ensuring dummy.log:"
            ls -l logs
            if [ -z "$(ls -A logs)" ]; then
              echo "ERROR: logs directory is still empty after attempting to create dummy.log"
              exit 1
            else
              echo "Logs directory is ready for SCP."
            fi
          '
      - name: Copy local dummy.log to server if needed
        run: |
          echo "No logs available." > dummy.log
          scp -o StrictHostKeyChecking=no dummy.log ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ secrets.DEPLOY_PATH }}/logs/dummy.log
      - name: "Debug: List logs directory on server before SCP"
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} '
            cd ${{ secrets.DEPLOY_PATH }}
            echo "Listing logs directory before SCP:"
            ls -l logs
          '
      - name: Create local workflow_logs directory
        run: |
          mkdir -p workflow_logs
          echo "No logs available. Created by workflow." > workflow_logs/dummy.log
          echo "Created local workflow_logs directory with dummy file for artifact upload"
      - name: Download logs from server
        run: |
          # Create a directory for logs
          mkdir -p downloaded_logs
          # Try to download logs using scp, but don't fail if it doesn't work
          scp -o StrictHostKeyChecking=no -r ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ secrets.DEPLOY_PATH }}/logs/* downloaded_logs/ || true
          # Check if we got any logs, if not create a dummy file
          if [ -z "$(ls -A downloaded_logs)" ]; then
            echo "No logs were downloaded, creating a dummy log file"
            echo "No logs were available on the server at the time of collection." > downloaded_logs/empty_logs.txt
          fi
          # Copy all downloaded logs to the workflow_logs directory
          cp -r downloaded_logs/* workflow_logs/ || true
          # List what we have
          echo "Contents of workflow_logs directory:"
          ls -la workflow_logs/
      - name: Archive logs
        uses: actions/upload-artifact@v4
        with:
          name: deployment-logs
          path: workflow_logs/
          retention-days: 7

  summary:
    name: 🎉 Deployment Summary
    needs: [debug_info, validate, setup, deploy, verify, logs]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate Summary
        run: |
          echo "# 3x-ui VPN Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Configuration Validation**: See validate job" >> $GITHUB_STEP_SUMMARY
          echo "✅ **SSH Setup**: See setup job" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Deployment**: See deploy job" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Verification**: See verify job" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Logs**: See logs job" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Access Information" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Admin Panel**: https://${{ secrets.VPN_DOMAIN }}:54321/" >> $GITHUB_STEP_SUMMARY
      - name: Output Result
        run: |
          echo "✅ 3x-ui VPN deployment workflow completed." 