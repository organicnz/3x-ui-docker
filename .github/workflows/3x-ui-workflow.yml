name: 3x-ui VPN Service Management

on:
  push:
    branches: [main]
    paths-ignore:
      - "**.md"
      - ".gitignore"
  workflow_dispatch:
    inputs:
      workflow_type:
        description: 'Workflow to run'
        required: true
        default: 'deploy'
        type: choice
        options:
          - setup
          - deploy
          - backup
      environment:
        description: 'Environment to target'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
  schedule:
    - cron: '0 2 * * *'  # Run backup daily at 2 AM UTC

jobs:
  # Determine which workflow to run
  select_workflow:
    runs-on: ubuntu-latest
    outputs:
      run_setup: ${{ steps.set_vars.outputs.run_setup }}
      run_deploy: ${{ steps.set_vars.outputs.run_deploy }}
      run_backup: ${{ steps.set_vars.outputs.run_backup }}
      environment: ${{ steps.set_vars.outputs.environment }}
    steps:
      - name: Set workflow variables
        id: set_vars
        run: |
          # Default is to run deploy on push
          RUN_SETUP="false"
          RUN_DEPLOY="false"
          RUN_BACKUP="false"
          ENVIRONMENT="production"
          
          # Schedule event runs backup
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            RUN_BACKUP="true"
          fi
          
          # Push event runs deploy
          if [[ "${{ github.event_name }}" == "push" ]]; then
            RUN_DEPLOY="true"
          fi
          
          # Workflow dispatch uses specified options
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
            
            if [[ "${{ github.event.inputs.workflow_type }}" == "setup" ]]; then
              RUN_SETUP="true"
            elif [[ "${{ github.event.inputs.workflow_type }}" == "deploy" ]]; then
              RUN_DEPLOY="true"
            elif [[ "${{ github.event.inputs.workflow_type }}" == "backup" ]]; then
              RUN_BACKUP="true"
            fi
          fi
          
          echo "run_setup=${RUN_SETUP}" >> $GITHUB_OUTPUT
          echo "run_deploy=${RUN_DEPLOY}" >> $GITHUB_OUTPUT
          echo "run_backup=${RUN_BACKUP}" >> $GITHUB_OUTPUT
          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT

  # Initial VPS setup workflow
  setup:
    name: Initial Server Setup
    needs: select_workflow
    if: needs.select_workflow.outputs.run_setup == 'true'
    runs-on: ubuntu-latest
    environment: ${{ needs.select_workflow.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Add host key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
      
      - name: Server setup
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Create deployment directory structure
            echo "Creating deployment directory: ${{ secrets.DEPLOY_PATH }}"
            mkdir -p ${{ secrets.DEPLOY_PATH }}
            
            # Create subdirectories
            echo "Creating subdirectories..."
            mkdir -p ${{ secrets.DEPLOY_PATH }}/cert
            mkdir -p ${{ secrets.DEPLOY_PATH }}/logs
            mkdir -p ${{ secrets.DEPLOY_PATH }}/backups
            
            # Set proper permissions
            echo "Setting permissions..."
            chmod 755 ${{ secrets.DEPLOY_PATH }}
            chmod 700 ${{ secrets.DEPLOY_PATH }}/cert
            
            # Check if Docker is installed
            if ! command -v docker &> /dev/null; then
              echo "Docker not found, installing..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
            else
              echo "Docker is already installed"
            fi
            
            # Check if Docker Compose is installed
            if ! command -v docker-compose &> /dev/null; then
              echo "Docker Compose not found, installing..."
              apt-get update
              apt-get install -y docker-compose
            else
              echo "Docker Compose is already installed"
            fi
            
            # Create a default empty database file if it doesn't exist
            if [ ! -f ${{ secrets.DEPLOY_PATH }}/x-ui.db ]; then
              echo "Creating empty database file..."
              touch ${{ secrets.DEPLOY_PATH }}/x-ui.db
              chmod 600 ${{ secrets.DEPLOY_PATH }}/x-ui.db
            fi
            
            # Set up logrotate for logs
            echo "Setting up log rotation..."
            cat > /tmp/x-ui-logrotate << 'EOL'
            ${{ secrets.DEPLOY_PATH }}/logs/*.log {
                daily
                missingok
                rotate 7
                compress
                delaycompress
                notifempty
                create
            }
            EOL
            sudo mv /tmp/x-ui-logrotate /etc/logrotate.d/x-ui
            
            echo "Server setup completed successfully!"
      
      - name: Verify setup
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Verifying directory structure..."
            ls -la ${{ secrets.DEPLOY_PATH }}
            
            echo "Verifying Docker installation..."
            docker --version
            docker-compose --version
            
            echo "Setup verification completed!"
  
  # Deployment workflow
  deploy:
    name: Deploy 3x-ui
    needs: select_workflow
    if: needs.select_workflow.outputs.run_deploy == 'true'
    runs-on: ubuntu-latest
    environment: ${{ needs.select_workflow.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Add host key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
      
      - name: Transfer files
        run: |
          rsync -avz --exclude='.git/' \
            --exclude='.github/' \
            --exclude='node_modules/' \
            --exclude='.gitignore' \
            ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ secrets.DEPLOY_PATH }}
      
      - name: Deploy VPN service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}
            
            # Create directories if they don't exist
            mkdir -p cert logs
            
            # Stop running container
            docker-compose down || true
            
            # Pull latest image
            docker-compose pull
            
            # Start container
            docker-compose up -d
            
            # Check if service is running
            docker-compose ps
            
            # Check logs
            docker-compose logs --tail=20
      
      - name: Verify deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}
            
            # Wait for service to stabilize
            sleep 30
            
            # Check if container is healthy
            CONTAINER_STATUS=$(docker inspect --format='{{.State.Health.Status}}' 3x-ui)
            
            if [ "$CONTAINER_STATUS" = "healthy" ]; then
              echo "Deployment successful! Container is healthy."
              exit 0
            else
              echo "Container is not healthy. Status: $CONTAINER_STATUS"
              echo "Container logs:"
              docker-compose logs --tail=50
              exit 1
            fi
  
  # Backup workflow
  backup:
    name: Backup x-ui.db
    needs: select_workflow
    if: needs.select_workflow.outputs.run_backup == 'true'
    runs-on: ubuntu-latest
    environment: ${{ needs.select_workflow.outputs.environment }}
    
    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Add host key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
      
      - name: Create backup directory
        run: mkdir -p ./backups
      
      - name: Perform backup
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Create backup directory if it doesn't exist
            mkdir -p ${{ secrets.DEPLOY_PATH }}/backups
            
            # Generate timestamp
            TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
            
            # Create backup
            cd ${{ secrets.DEPLOY_PATH }}
            cp x-ui.db "backups/x-ui.db.backup_${TIMESTAMP}"
            
            # Compress backup
            gzip "backups/x-ui.db.backup_${TIMESTAMP}"
            
            # Keep only the 7 most recent backups
            ls -tp backups/x-ui.db.backup_* | grep -v '/$' | tail -n +8 | xargs -I {} rm -- {}
            
            # Report backup status
            echo "Backup completed: x-ui.db.backup_${TIMESTAMP}.gz"
            echo "Available backups:"
            ls -lh backups/
      
      - name: Download latest backup
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "${{ secrets.DEPLOY_PATH }}/backups/x-ui.db.backup_*"
          target: "./backups"
          strip_components: 2
      
      - name: Archive backup
        uses: actions/upload-artifact@v3
        with:
          name: x-ui-db-backup
          path: ./backups/
          retention-days: 7 